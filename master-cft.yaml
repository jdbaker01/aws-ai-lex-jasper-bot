Description: >
  This template uses AWS CodeBuild and AWS CodePipeline to
  achieve continuous deployment of the sample jasper bot source code
  from a GitHub repository. Note: The StackName for this app stack must
  not contain numerals 0-9 or a hyphen. The StackName is appended to resources
  created downstream and Lex will not handle numerals or hyphens as part of
  names for slot types, intents, or the bot name at the present time.

Parameters:

  GitHubRepo:
    Type: String
    Default: aws-ai-lex-jasper-bot
    Description: The repo name of the sample service
    MinLength: 1

  GitHubRepoOwner:
    Type: String
    Description: GitHub username of repo owner
    MinLength: 1

  GitHubBranch:
    Type: String
    Default: master
    Description: The branch of the repo to continuously deploy
    MinLength: 1

  GitHubToken:
    Type: String
    Description: >
      GitHub OAuth Token with access to the repo (https://github.com/settings/tokens)
    MinLength: 1

Metadata:
  AWS::CloudFormation::Interface:
    ParameterLabels:
      GitHubRepo:
        default: "Repo"
      GitHubRepoOwner:
        default: "Owner"
      GitHubBranch:
        default: "Branch"
      GitHubToken:
        default: "Personal Access Token"
    ParameterGroups:
      - Label:
          default: GitHub Configuration
        Parameters:
          - GitHubRepo
          - GitHubBranch
          - GitHubRepoOwner
          - GitHubToken


Resources:
    CleanStackNameExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Principal:
                          Service:
                              - lambda.amazonaws.com
                      Effect: Allow
                      Action:
                          - sts:AssumeRole
            Policies:
                - PolicyName: LogsForLambda
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - logs:CreateLogGroup
                                - logs:CreateLogStream
                                - logs:PutLogEvents
                            Resource:
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"
    CleanStackName:
        DependsOn: CleanStackNameExecutionRole
        Type: Custom::CleanStackName
        Properties:
            ServiceToken: !GetAtt CleanStackNameFunction.Arn
    CleanStackNameFunction:
        Type: AWS::Lambda::Function
        Properties:
            Handler: index.handler
            Role: !GetAtt CleanStackNameExecutionRole.Arn
            Runtime: python2.7
            Timeout: 300
            Code:
                ZipFile: !Sub |
                    from __future__ import print_function
                    import json
                    import boto3
                    import cfnresponse
                    import time
                    def handler(event, context):
                        print(json.dumps(event))
                        if (event["RequestType"] == "Delete"):
                            responseData={"Data":"OK"}
                            try:
                                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                            except Exception as e:
                                print("Exception thrown in cfnresponse: %s" % str(e))
                                pass
                        else:
                            val = enforceSyntax("${AWS::StackName}")
                            time.sleep(10)  # pause for CloudWatch logs
                            responseData={"Data":"OK","CleanStackNameValue":val}
                            try:
                                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                            except Exception as e:
                                print("Exception thrown in cfnresponse: %s" % str(e))
                                pass
                    def enforceSyntax(val):
                        badChars=['0','1','2','3','4','5','6','7','8','9','-']
                        goodChars=['a','b','c','d','e','f','g','h','i','j','k']
                        i=0
                        res = val
                        for b in badChars:
                            res = res.replace(b,goodChars[i])
                            i +=1
                        return res
    # Artifact Bucket used by CodePipeline and CodBuild
    ArtifactStore:
        Type: AWS::S3::Bucket
        DependsOn: CleanStackName
        DeletionPolicy: Retain
        Properties:
            VersioningConfiguration:
                Status: Enabled

    CodeBuildRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Principal:
                          Service:
                              - codebuild.amazonaws.com
                      Effect: Allow
                      Action:
                          - sts:AssumeRole
            Policies:
                - PolicyName: CloudWatchLogsCodeBuild
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - logs:CreateLogGroup
                                - logs:CreateLogStream
                                - logs:PutLogEvents
                            Resource: "*"
                - PolicyName: CloudFormationAccess
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - cloudformation:CreateStack
                                - cloudformation:DeleteStack
                                - cloudformation:DescribeStacks
                                - cloudformation:ListStacks
                                - cloudformation:UpdateStack
                            Resource: "*"
                - PolicyName: LambdaCreateAccess
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - lambda:CreateFunction
                                - lambda:DeleteFunction
                                - lambda:InvokeFunction
                                - lambda:GetFunctionConfiguration
                                - lambda:GetFunction
                                - lambda:UpdateFunctionCode
                                - lambda:UpdateFunctionConfiguration
                                - lambda:AddPermission
                            Resource: "*"
                - PolicyName: IamCreateRoleAccess
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - iam:CreateRole
                                - iam:DeleteRole
                                - iam:PutRolePolicy
                                - iam:DeleteRolePolicy
                                - iam:GetRole
                                - iam:PassRole
                                - iam:CreateServiceLinkedRole
                            Resource: "*"
                - PolicyName: LexAccess
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - lex:CreateBotChannelAssociation
                                - lex:CreateBotVersion
                                - lex:CreateIntentVersion
                                - lex:CreateSlotTypeVersion
                                - lex:DeleteBot
                                - lex:DeleteBotAlias
                                - lex:DeleteBotChannelAssociation
                                - lex:DeleteIntent
                                - lex:DeleteSlotType
                                - lex:DeleteUtterances
                                - lex:GetBot
                                - lex:GetBotAlias
                                - lex:GetBotAliases
                                - lex:GetBotChannelAssociation
                                - lex:GetBotChannelAssociations
                                - lex:GetBuiltinIntent
                                - lex:GetBuiltinIntents
                                - lex:GetBuiltinSlotTypes
                                - lex:GetBots
                                - lex:GetBotVersions
                                - lex:GetIntent
                                - lex:GetIntents
                                - lex:GetIntentVersions
                                - lex:GetSlotType
                                - lex:GetSlotTypes
                                - lex:GetSlotTypeVersions
                                - lex:GetUtterancesView
                                - lex:PutBot
                                - lex:PutBotAlias
                                - lex:PutIntent
                                - lex:PutSlotType
                            Resource: "*"
                - PolicyName: S3ReadWrite
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - s3:Get*
                                - s3:Head*
                                - s3:List*
                                - s3:CreateMultipartUpload
                                - s3:CompleteMultipartUpload
                                - s3:AbortMultipartUpload
                                - s3:CopyObject
                                - s3:PutObject*
                                - s3:DeleteObject*
                                - s3:Upload*
                            Resource:
                                - !Sub "arn:aws:s3:::${ArtifactStore}"
                                - !Sub "arn:aws:s3:::${ArtifactStore}/*"

    CodeBuild:
        Type: AWS::CodeBuild::Project
        Properties:
            Name: !GetAtt CleanStackName.CleanStackNameValue
            Description: Used to build the Lex Bot
            ServiceRole: !GetAtt CodeBuildRole.Arn
            TimeoutInMinutes: 30
            Artifacts:
                Type: CODEPIPELINE
            Environment:
                Type: LINUX_CONTAINER
                Image: aws/codebuild/eb-nodejs-4.4.6-amazonlinux-64:2.1.3
                ComputeType: BUILD_GENERAL1_LARGE
                EnvironmentVariables:
                    - Name: BOOTSTRAP_BUCKET_PATH
                      Value: !Sub "${ArtifactStore}/customresources"
                    - Name: AWS_DEFAULT_REGION
                      Value: !Sub "${AWS::Region}"
                    - Name: CLEAN_STACK_NAME
                      Value: !Sub "${CleanStackName.CleanStackNameValue}"

            Source:
                Type: CODEPIPELINE
                BuildSpec: !Sub |
                    version: 0.1
                    phases:
                        install:
                            commands:
                                - echo "INFO install cmds"
                                - yum install zip -y
                                - npm install -g n
                                - n stable
                                - npm update -g npm
                        pre_build:
                            commands:
                                - echo "INFO pre_build cmds"
                                - aws configure set region "$AWS_DEFAULT_REGION"
                                - # cd LexAppBuilder && npm install
                                - # npm install
                                - cd build-lex-bot
                        build:
                            commands:
                                - echo "INFO build cmds"
                                - pwd
                                - env
                                - # node masterBuild.js --bootstrap-bucket ${ArtifactStore} --botname ${CleanStackName.CleanStackNameValue} --model LexAppBuilder/model/TrackingBotModel.json --region ${AWS::Region}
                                - echo "Hello!"
                                - cd build-lex-bot && python test.py
                        post_build:
                            commands:
                                - echo "INFO post_build cmds"

    CodePipeline:
        Type: AWS::CodePipeline::Pipeline
        Properties:
            Name: !GetAtt CleanStackName.CleanStackNameValue
            ArtifactStore:
                Type: S3
                Location: !Ref ArtifactStore
            RoleArn: !GetAtt CodePipelineRole.Arn
            Stages:
                - Name: Source
                  Actions:
                      - Name: GitHubRepo
                        ActionTypeId:
                          Category: Source
                          Owner: ThirdParty
                          Version: 1
                          Provider: GitHub
                        Configuration:
                          Owner: !Ref GitHubRepoOwner
                          Repo: !Ref GitHubRepo
                          Branch: !Ref GitHubBranch
                          OAuthToken: !Ref GitHubToken
                        OutputArtifacts:
                            - Name: SourceOutput
                        RunOrder: 1
                - Name: BuildDeploy
                  Actions:
                      - Name: LexBot
                        InputArtifacts:
                            - Name: SourceOutput
                        ActionTypeId:
                            Category: Build
                            Owner: AWS
                            Version: 1
                            Provider: CodeBuild
                        Configuration:
                            ProjectName: !Ref CodeBuild
                        RunOrder: 1

    CodePipelineRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Principal:
                          Service:
                              - codepipeline.amazonaws.com
                      Effect: Allow
                      Action:
                          - sts:AssumeRole
            Policies:
                - PolicyName: S3ReadWrite
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - s3:Get*
                                - s3:Head*
                                - s3:List*
                                - s3:CreateMultipartUpload
                                - s3:CompleteMultipartUpload
                                - s3:AbortMultipartUpload
                                - s3:CopyObject
                                - s3:PutObject*
                                - s3:DeleteObject*
                                - s3:Upload*
                            Resource:
                                - !Sub "arn:aws:s3:::${ArtifactStore}"
                                - !Sub "arn:aws:s3:::${ArtifactStore}/*"
                - PolicyName: CodeBuildStart
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - codebuild:BatchGetBuilds
                                - codebuild:StartBuild
                            Resource:
                                - !GetAtt CodeBuild.Arn

    PipelineCleanup:
        DependsOn: CodePipeline
        Type: Custom::PipelineCleanup
        Properties:
            ServiceToken: !GetAtt PipelineCleanupFunction.Arn
    PipelineCleanupFunction:
        Type: AWS::Lambda::Function
        Properties:
            Handler: index.handler
            Role: !GetAtt PipelineCleanupExecutionRole.Arn
            Runtime: python2.7
            Timeout: 300
            Code:
                ZipFile: !Sub |
                    from __future__ import print_function
                    import json
                    import boto3
                    import cfnresponse
                    import time
                    def handler(event, context):
                        print(json.dumps(event))
                        if (event["RequestType"] == "Delete"):
                            try:
                                deleteStack("${CleanStackName.CleanStackNameValue}LexAppStack")
                                deleteS3Bucket("${ArtifactStore}")
                            except Exception as e:
                                print("Exception thrown: %s" % str(e))
                                pass
                        else:
                            print("RequestType %s, nothing to do" % event["RequestType"])
                        time.sleep(30)  # pause for CloudWatch logs
                        print('Done')
                        responseData={"Data":"OK"}
                        try:
                            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                        except Exception as e:
                            print("Exception thrown in cfnresponse: %s" % str(e))
                            pass
                    def deleteS3Bucket(bucketName):
                        print("Deleting S3 Bucket %s" % bucketName)
                        s3resource = boto3.resource('s3')
                        bucket = s3resource.Bucket(bucketName)
                        bucket.objects.delete()
                        for version in bucket.object_versions.all():
                            version.delete()
                        bucket.delete()
                    def deleteStack(stackName):
                        print("Deleting stack %s" % stackName)
                        client = boto3.client('cloudformation')
                        response=client.describe_stacks(StackName=stackName)
                        stackId=response["Stacks"][0]["StackId"]
                        print("Unique stackId: %s" % stackId)
                        client.delete_stack(StackName=stackId)
                        print("Wait for stack DELETE to complete")
                        waiter = client.get_waiter('stack_delete_complete')
                        waiter.wait(StackName = stackId)
    PipelineCleanupExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Principal:
                          Service:
                              - lambda.amazonaws.com
                      Effect: Allow
                      Action:
                          - sts:AssumeRole
            Policies:
                - PolicyName: LogsForLambda
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - logs:CreateLogGroup
                                - logs:CreateLogStream
                                - logs:PutLogEvents
                            Resource:
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"
                - PolicyName: S3All
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - s3:*
                            Resource:
                                - !Sub "arn:aws:s3:::${ArtifactStore}"
                                - !Sub "arn:aws:s3:::${ArtifactStore}/*"
                - PolicyName: IAMDeleteAccess
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - iam:Delete*
                            Resource:
                                - !Sub "arn:aws:iam::${AWS::AccountId}:*"
                - PolicyName: LambdaDeleteAccess
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - lambda:DeleteFunction
                                - lambda:InvokeFunction
                                - lambda:RemovePermission
                            Resource:
                                - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:processBotInfo${CleanStackName.CleanStackNameValue}"
                                - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
                - PolicyName: CFDelete
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - cloudformation:DeleteStack
                                - cloudformation:DescribeAccountLimits
                                - cloudformation:DescribeChangeSet
                                - cloudformation:DescribeStackEvents
                                - cloudformation:DescribeStackResource
                                - cloudformation:DescribeStackResources
                                - cloudformation:DescribeStacks
                                - cloudformation:ListChangeSets
                                - cloudformation:ListStackResources
                                - cloudformation:ListStacks
                            Resource:
                                - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${CleanStackName.CleanStackNameValue}*"
                - PolicyName: LexAccessDelete
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - lex:DeleteBot
                                - lex:DeleteBotAlias
                                - lex:DeleteBotChannelAssociation
                                - lex:DeleteIntent
                                - lex:DeleteSlotType
                                - lex:DeleteUtterances
                                - lex:GetBot
                                - lex:GetBotAlias
                                - lex:GetBotAliases
                                - lex:GetBotChannelAssociation
                                - lex:GetBotChannelAssociations
                                - lex:GetBuiltinIntent
                                - lex:GetBuiltinIntents
                                - lex:GetBuiltinSlotTypes
                                - lex:GetBots
                                - lex:GetBotVersions
                                - lex:GetIntent
                                - lex:GetIntents
                                - lex:GetIntentVersions
                                - lex:GetSlotType
                                - lex:GetSlotTypes
                                - lex:GetSlotTypeVersions
                                - lex:GetUtterancesView
                            Resource: "*"

Outputs:
    PipelineUrl:
        Description: >
            Monitor the pipeline URL to see when the application has been fully
            built and deployed.
        Value: !Sub "https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${CodePipeline}"

